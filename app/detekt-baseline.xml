<?xml version="1.0" ?>
<!--
  ~ Copyright (C) 2021-2024 MURENA SAS
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <https://www.gnu.org/licenses/>.
  ~
  -->
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>EmptyCatchBlock:NativeDeviceInfoProviderModule.kt$NativeDeviceInfoProviderModule${ }</ID>
    <ID>EmptyFunctionBlock:CleanApkAuthenticator.kt$CleanApkAuthenticator${}</ID>
    <ID>ImplicitDefaultLocale:ApplicationFragment.kt$ApplicationFragment$String.format("%d%%", progressPercentage)</ID>
    <ID>ImplicitDefaultLocale:ApplicationListFragment.kt$ApplicationListFragment$String.format("%d%%", progress)</ID>
    <ID>ImplicitDefaultLocale:HomeFragment.kt$HomeFragment$String.format("%d%%", progress)</ID>
    <ID>ImplicitDefaultLocale:SearchFragment.kt$SearchFragment$String.format("%d%%", progress)</ID>
    <ID>ImplicitDefaultLocale:StorageComputer.kt$StorageComputer$String.format("%.1f %cB", bytes / 1000.0, ci.current())</ID>
    <ID>ImplicitDefaultLocale:UpdatesFragment.kt$UpdatesFragment$String.format("%d%%", progress)</ID>
    <ID>InstanceOfCheckForException:GPlayHttpClient.kt$GPlayHttpClient$e is SocketTimeoutException</ID>
    <ID>InvalidPackageDeclaration:Trackers.kt$package foundation.e.apps.data.exodus</ID>
    <ID>LargeClass:ApplicationFragment.kt$ApplicationFragment : TimeoutFragment</ID>
    <ID>LongParameterList:AppManagerImpl.kt$AppManagerImpl$( @Named("cacheDir") private val cacheDir: String, private val downloadManager: DownloadManager, private val notificationManager: NotificationManager, private val appInstallRepository: AppInstallRepository, private val pwaManager: PWAManager, private val appLoungePackageManager: AppLoungePackageManager, @Named("download") private val downloadNotificationChannel: NotificationChannel, @Named("update") private val updateNotificationChannel: NotificationChannel, @ApplicationContext private val context: Context )</ID>
    <ID>LongParameterList:ApplicationDialogFragment.kt$ApplicationDialogFragment$( title: String, message: String, @DrawableRes drawableResId: Int = -1, drawable: Drawable? = null, positiveButtonText: String = "", positiveButtonAction: (() -&gt; Unit)? = null, cancelButtonText: String = "", cancelButtonAction: (() -&gt; Unit)? = null, cancelable: Boolean = true, onDismissListener: (() -&gt; Unit)? = null, )</ID>
    <ID>LongParameterList:ApplicationListRVAdapter.kt$ApplicationListRVAdapter$( private val applicationInstaller: ApplicationInstaller, private val privacyInfoViewModel: PrivacyInfoViewModel, private val appInfoFetchViewModel: AppInfoFetchViewModel, private val mainActivityViewModel: MainActivityViewModel, private val currentDestinationId: Int, private var lifecycleOwner: LifecycleOwner?, private var paidAppHandler: ((Application) -&gt; Unit)? = null )</ID>
    <ID>LongParameterList:ApplicationViewModel.kt$ApplicationViewModel$( id: String, packageName: String, origin: Origin, isFdroidLink: Boolean, authObjectList: List&lt;AuthObject&gt;, retryBlock: (failedObjects: List&lt;AuthObject&gt;) -&gt; Boolean, )</ID>
    <ID>LongParameterList:CleanApkRetrofit.kt$CleanApkRetrofit$( @Query("keyword") keyword: String, @Query("source") source: String = APP_SOURCE_FOSS, @Query("type") type: String = APP_TYPE_ANY, @Query("nres") nres: Int = 20, @Query("page") page: Int = 1, @Query("by") by: String? = null, )</ID>
    <ID>LongParameterList:EglExtensionProvider.kt$EglExtensionProvider$( egl10: EGL10, eglDisplay: EGLDisplay, eglConfig: EGLConfig?, ai: IntArray, ai1: IntArray?, set: MutableSet&lt;String&gt; )</ID>
    <ID>LongParameterList:MainActivityViewModel.kt$MainActivityViewModel$( private val appLoungeDataStore: AppLoungeDataStore, private val applicationRepository: ApplicationRepository, private val appManagerWrapper: AppManagerWrapper, private val appLoungePackageManager: AppLoungePackageManager, private val pwaManager: PWAManager, private val ecloudRepository: EcloudRepository, private val blockedAppRepository: BlockedAppRepository, private val contentRatingsRepository: ContentRatingsRepository, private val appInstallProcessor: AppInstallProcessor, )</ID>
    <ID>LongParameterList:UpdatesManagerImpl.kt$UpdatesManagerImpl$( @ApplicationContext private val context: Context, private val appLoungePackageManager: AppLoungePackageManager, private val applicationRepository: ApplicationRepository, private val faultyAppRepository: FaultyAppRepository, private val appLoungePreference: AppLoungePreference, private val fdroidRepository: FdroidRepository, private val blockedAppRepository: BlockedAppRepository, )</ID>
    <ID>LongParameterList:UpdatesWorker.kt$UpdatesWorker$( @Assisted private val context: Context, @Assisted private val params: WorkerParameters, private val updatesManagerRepository: UpdatesManagerRepository, private val dataStoreManager: DataStoreManager, private val authenticatorRepository: AuthenticatorRepository, private val appInstallProcessor: AppInstallProcessor, private val blockedAppRepository: BlockedAppRepository, )</ID>
    <ID>MagicNumber:AnonymousLoginManager.kt$AnonymousLoginManager$200</ID>
    <ID>MagicNumber:ApkSignatureManager.kt$ApkSignatureManager$1024</ID>
    <ID>MagicNumber:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$3</ID>
    <ID>MagicNumber:AppDatabase.kt$AppDatabase.Companion.&lt;no name provided&gt;$4</ID>
    <ID>MagicNumber:AppManagerWrapper.kt$AppManagerWrapper$100</ID>
    <ID>MagicNumber:ApplicationFragment.kt$ApplicationFragment$100f</ID>
    <ID>MagicNumber:ApplicationFragment.kt$ApplicationFragment$15</ID>
    <ID>MagicNumber:ApplicationFragment.kt$ApplicationFragment$3</ID>
    <ID>MagicNumber:ApplicationFragment.kt$ApplicationFragment$3.4</ID>
    <ID>MagicNumber:ApplicationFragment.kt$ApplicationFragment$6</ID>
    <ID>MagicNumber:ApplicationListRVAdapter.kt$ApplicationListRVAdapter$0.6f</ID>
    <ID>MagicNumber:ApplicationListRVAdapter.kt$ApplicationListRVAdapter$0.7f</ID>
    <ID>MagicNumber:ApplicationListRVAdapter.kt$ApplicationListRVAdapter$500</ID>
    <ID>MagicNumber:AuthObject.kt$AuthObject.GPlayAuth$401</ID>
    <ID>MagicNumber:CleanApkPWARepository.kt$CleanApkPWARepository$20</ID>
    <ID>MagicNumber:CommonUtilsModule.kt$CommonUtilsModule$10</ID>
    <ID>MagicNumber:CommonUtilsModule.kt$CommonUtilsModule$1024</ID>
    <ID>MagicNumber:DepthPageTransformer.kt$DepthPageTransformer$0.75f</ID>
    <ID>MagicNumber:DownloadManagerUtils.kt$DownloadManagerUtils$1500</ID>
    <ID>MagicNumber:DownloadProgressLD.kt$DownloadProgressLD$20</ID>
    <ID>MagicNumber:DownloadProgressLD.kt$DownloadProgressLD$500</ID>
    <ID>MagicNumber:DumpAuthData.kt$DumpAuthData$4</ID>
    <ID>MagicNumber:EglExtensionProvider.kt$EglExtensionProvider$12440</ID>
    <ID>MagicNumber:EglExtensionProvider.kt$EglExtensionProvider$4</ID>
    <ID>MagicNumber:EglExtensionProvider.kt$EglExtensionProvider$7939</ID>
    <ID>MagicNumber:FileManager.kt$FileManager$1024</ID>
    <ID>MagicNumber:HomeChildRVAdapter.kt$HomeChildRVAdapter$0.6f</ID>
    <ID>MagicNumber:HomeChildRVAdapter.kt$HomeChildRVAdapter$0.7f</ID>
    <ID>MagicNumber:HomeChildRVAdapter.kt$HomeChildRVAdapter$500</ID>
    <ID>MagicNumber:InstallerService.kt$InstallerService$69</ID>
    <ID>MagicNumber:NativeDeviceInfoProviderModule.kt$NativeDeviceInfoProviderModule$15</ID>
    <ID>MagicNumber:PackageInstallerService.kt$PackageInstallerService$69</ID>
    <ID>MagicNumber:PkgManagerBR.kt$PkgManagerBR$69</ID>
    <ID>MagicNumber:PlayStoreLoginWrapper.kt$PlayStoreLoginWrapper$200</ID>
    <ID>MagicNumber:ScreenshotRVAdapter.kt$ScreenshotRVAdapter$10f</ID>
    <ID>MagicNumber:ScreenshotRVAdapter.kt$ScreenshotRVAdapter$50f</ID>
    <ID>MagicNumber:StorageComputer.kt$StorageComputer$1000</ID>
    <ID>MagicNumber:StorageComputer.kt$StorageComputer$1000.0</ID>
    <ID>MagicNumber:StorageComputer.kt$StorageComputer$500</ID>
    <ID>MagicNumber:StorageComputer.kt$StorageComputer$999950</ID>
    <ID>MagicNumber:TOSFragment.kt$TOSFragment$20</ID>
    <ID>MaxLineLength:AppManagerImpl.kt$AppManagerImpl$.</ID>
    <ID>MaxLineLength:AppManagerImpl.kt$AppManagerImpl$return</ID>
    <ID>MaxLineLength:AppManagerWrapper.kt$AppManagerWrapper$downloadList.find { it.origin == app.origin &amp;&amp; (it.packageName == app.package_name || it.id == app.package_name) }</ID>
    <ID>MaxLineLength:AppManagerWrapper.kt$AppManagerWrapper$return fdroidRepository.isFdroidApplicationSigned(context, appInstall.packageName, apkFilePath, appInstall.signature)</ID>
    <ID>MaxLineLength:AppManagerWrapper.kt$AppManagerWrapper$suspend</ID>
    <ID>MaxLineLength:AppPrivacyInfo.kt$AppPrivacyInfo</ID>
    <ID>MaxLineLength:ApplicationFragment.kt$ApplicationFragment.Companion$"https://gitlab.e.foundation/e/os/apps/-/blob/main/app/src/main/java/foundation/e/apps/data/exodus/repositories/PrivacyScoreRepositoryImpl.kt"</ID>
    <ID>MaxLineLength:CommonUtilsModule.kt$CommonUtilsModule$*</ID>
    <ID>MaxLineLength:DownloadManager.kt$DownloadManager$Timber.e("Download Issue: $downloadId : DownloadManager returns status: $status but the failed because: reason: $reason")</ID>
    <ID>MaxLineLength:DownloadManagerUtils.kt$DownloadManagerUtils$Timber.d("===&gt; updateDownloadStatus: ${appInstall.name}: $downloadId: $numberOfDownloadedItems/${appInstall.downloadIdMap.size}")</ID>
    <ID>MaxLineLength:DownloadManagerUtils.kt$DownloadManagerUtils$if</ID>
    <ID>MaxLineLength:DownloadManagerUtils.kt$DownloadManagerUtils$numberOfDownloadedItems == appInstall.downloadIdMap.size &amp;&amp; numberOfDownloadedItems == appInstall.downloadURLList.size</ID>
    <ID>MaxLineLength:FdroidRepository.kt$FdroidRepository$override suspend</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$if</ID>
    <ID>MaxLineLength:MainActivityViewModel.kt$MainActivityViewModel$fusedDownload.origin == it.origin &amp;&amp; (fusedDownload.packageName == it.package_name || fusedDownload.id == it._id)</ID>
    <ID>MaxLineLength:PlayStoreRepository.kt$PlayStoreRepository$suspend fun getSearchResult(query: String, subBundle: MutableSet&lt;SearchBundle.SubBundle&gt;?): Pair&lt;List&lt;App&gt;, MutableSet&lt;SearchBundle.SubBundle&gt;&gt;</ID>
    <ID>MaxLineLength:PlayStoreRepositoryImpl.kt$PlayStoreRepositoryImpl$context.getString(R.string.movers_shakers_apps) to mapOf(Chart.MOVERS_SHAKERS to TopChartsHelper.Type.APPLICATION)</ID>
    <ID>MaxLineLength:PlayStoreRepositoryImpl.kt$PlayStoreRepositoryImpl$context.getString(R.string.topselling_free_apps) to mapOf(Chart.TOP_SELLING_FREE to TopChartsHelper.Type.APPLICATION)</ID>
    <ID>MaxLineLength:PrivacyScoreRepositoryImpl.kt$PrivacyScoreRepositoryImpl$return if (numberOfTrackers &gt; THRESHOLD_OF_NON_ZERO_TRACKER_SCORE) MIN_TRACKER_SCORE else MAX_TRACKER_SCORE - numberOfTrackers</ID>
    <ID>MaxLineLength:SettingsFragment.kt$SettingsFragment$showAllApplications?.isChecked == true || showFOSSApplications?.isChecked == true || showPWAApplications?.isChecked == true</ID>
    <ID>MaxLineLength:UpdatesNotifier.kt$UpdatesNotifier$notificationBuilder.setContentText(context.getString(R.string.automatically_install_updates_notification_text))</ID>
    <ID>MaxLineLength:UpdatesViewModel.kt$UpdatesViewModel$return updatesList.value?.first?.any { it.status == Status.UPDATABLE || it.status == Status.INSTALLATION_ISSUE } == true</ID>
    <ID>MaxLineLength:UpdatesWorker.kt$UpdatesWorker$applicationContext.checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED</ID>
    <ID>MayBeConst:EcloudApiInterface.kt$EcloudApiInterface.Companion$val BASE_URL = "https://eu.gtoken.ecloud.global/"</ID>
    <ID>PrintStackTrace:CommonUtilsModule.kt$CommonUtilsModule$e</ID>
    <ID>PrintStackTrace:EcloudRepository.kt$EcloudRepository$e</ID>
    <ID>PrintStackTrace:InstallWorkManager.kt$InstallWorkManager$e</ID>
    <ID>PrintStackTrace:PlayStoreAuthenticator.kt$PlayStoreAuthenticator$e</ID>
    <ID>PrintStackTrace:SystemInfoProvider.kt$SystemInfoProvider$e</ID>
    <ID>ProtectedMemberInFinalClass:ApplicationListFragment.kt$ApplicationListFragment$// protected to avoid SyntheticAccessor protected val args: ApplicationListFragmentArgs by navArgs()</ID>
    <ID>ProtectedMemberInFinalClass:ApplicationListFragment.kt$ApplicationListFragment$// protected to avoid SyntheticAccessor protected val viewModel: ApplicationListViewModel by viewModels()</ID>
    <ID>ProtectedMemberInFinalClass:GoogleSignInFragment.kt$GoogleSignInFragment$// protected to avoid SyntheticAccessor protected val viewModel: LoginViewModel by lazy { ViewModelProvider(requireActivity())[LoginViewModel::class.java] }</ID>
    <ID>ProtectedMemberInFinalClass:SearchFragment.kt$SearchFragment$protected val searchViewModel: SearchViewModel by viewModels()</ID>
    <ID>ReturnCount:ApkSignatureManager.kt$ApkSignatureManager$private fun verifyAPKSignature( apkInputStream: BufferedInputStream, apkSignatureInputStream: InputStream, publicKeyInputStream: InputStream, packageName: String ): Boolean</ID>
    <ID>ReturnCount:AppInstallProcessor.kt$AppInstallProcessor$private suspend fun updateDownloadUrls(appInstall: AppInstall): Boolean</ID>
    <ID>ReturnCount:AppInstallProcessor.kt$AppInstallProcessor$suspend fun enqueueFusedDownload( appInstall: AppInstall, isAnUpdate: Boolean = false )</ID>
    <ID>ReturnCount:AppManagerWrapper.kt$AppManagerWrapper$suspend fun addDownload(appInstall: AppInstall): Boolean</ID>
    <ID>ReturnCount:AppManagerWrapper.kt$AppManagerWrapper$suspend fun calculateProgress( application: Application?, progress: DownloadProgress ): Int</ID>
    <ID>ReturnCount:AppPrivacyInfoRepositoryImpl.kt$AppPrivacyInfoRepositoryImpl$override suspend fun getAppPrivacyInfo( application: Application, appHandle: String ): Result&lt;AppPrivacyInfo&gt;</ID>
    <ID>ReturnCount:AppPrivacyInfoRepositoryImpl.kt$AppPrivacyInfoRepositoryImpl$private fun getAppPrivacyInfo( application: Application, appTrackerData: List&lt;Report&gt;, ): AppPrivacyInfo</ID>
    <ID>ReturnCount:DownloadManager.kt$DownloadManager$fun getSizeRequired(downloadId: Long): Long</ID>
    <ID>ReturnCount:DownloadManager.kt$DownloadManager$private fun sanitizeStatus(downloadId: Long, status: Int, reason: Int): Int</ID>
    <ID>ReturnCount:Extensions.kt$fun Context.isNetworkAvailable(): Boolean</ID>
    <ID>ReturnCount:PlayStoreAuthenticator.kt$PlayStoreAuthenticator$override suspend fun validateAuthData(): ResultSupreme&lt;AuthData?&gt;</ID>
    <ID>ReturnCount:PlayStoreAuthenticator.kt$PlayStoreAuthenticator$private suspend fun getAuthDataWithGoogleAccount(): ResultSupreme&lt;AuthData?&gt;</ID>
    <ID>ReturnCount:StorageNotificationManager.kt$StorageNotificationManager$private fun getSpaceMissing(appInstall: AppInstall, downloadId: Long? = null): Long</ID>
    <ID>ReturnCount:UpdatesManagerImpl.kt$UpdatesManagerImpl$private suspend fun calculateSignatureVersion(latestCleanapkApp: Application): String</ID>
    <ID>SpreadOperator:DownloadProgressLD.kt$DownloadProgressLD$(*downloadingIds.toLongArray())</ID>
    <ID>SpreadOperator:EglExtensionProvider.kt$EglExtensionProvider$(*`as`)</ID>
    <ID>SpreadOperator:NativeDeviceInfoProviderModule.kt$NativeDeviceInfoProviderModule$(*context.assets.locales)</ID>
    <ID>SpreadOperator:NativeDeviceInfoProviderModule.kt$NativeDeviceInfoProviderModule$(*systemSharedLibraryNames)</ID>
    <ID>SwallowedException:AppInfoFetchViewModel.kt$AppInfoFetchViewModel$e: Exception</ID>
    <ID>SwallowedException:AppInstallProcessor.kt$AppInstallProcessor$e: ApiException.AppNotPurchased</ID>
    <ID>SwallowedException:AppLoungePackageManager.kt$AppLoungePackageManager$e: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:ApplicationViewModel.kt$ApplicationViewModel$e: ApiException.AppNotFound</ID>
    <ID>SwallowedException:ApplicationViewModel.kt$ApplicationViewModel$e: Exception</ID>
    <ID>SwallowedException:GPlayHttpClient.kt$GPlayHttpClient$e: Exception</ID>
    <ID>SwallowedException:NativeDeviceInfoProviderModule.kt$NativeDeviceInfoProviderModule$e: Exception</ID>
    <ID>SwallowedException:NativeGsfVersionProvider.kt$NativeGsfVersionProvider$e: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:UpdatesManagerImpl.kt$UpdatesManagerImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnonymousLoginManager.kt$AnonymousLoginManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ApiCaller.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ApkSignatureManager.kt$ApkSignatureManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AppInfoFetchViewModel.kt$AppInfoFetchViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AppInstallProcessor.kt$AppInstallProcessor$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AppLoungePackageManager.kt$AppLoungePackageManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AppManagerImpl.kt$AppManagerImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ApplicationViewModel.kt$ApplicationViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BlockedAppRepository.kt$BlockedAppRepository$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:CommonUtilsModule.kt$CommonUtilsModule$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DownloadManager.kt$DownloadManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DownloadManager.kt$DownloadManager$e: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:DownloadManager.kt$DownloadManager$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:DownloadProgressLD.kt$DownloadProgressLD$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EcloudRepository.kt$EcloudRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:FileManager.kt$FileManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GPlayHttpClient.kt$GPlayHttpClient$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GoogleLoginManager.kt$GoogleLoginManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:InstallWorkManager.kt$InstallWorkManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LocaleChangedBroadcastReceiver.kt$LocaleChangedBroadcastReceiver$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:NativeDeviceInfoProviderModule.kt$NativeDeviceInfoProviderModule$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NetworkHandler.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PWAManager.kt$PWAManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PWAPlayerStatusReceiver.kt$PWAPlayerStatusReceiver$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PlayStoreAuthenticator.kt$PlayStoreAuthenticator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SystemInfoProvider.kt$SystemInfoProvider$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UpdatesManagerImpl.kt$UpdatesManagerImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UpdatesWorker.kt$UpdatesWorker$e: Throwable</ID>
    <ID>TooGenericExceptionThrown:AnonymousLoginManager.kt$AnonymousLoginManager$throw Exception( "Error fetching Anonymous credentials\n" + "Network code: ${response.code}\n" + "Success: ${response.isSuccessful}" + response.errorString.run { if (isNotBlank()) "\nError message: $this" else "" } )</ID>
    <ID>TooGenericExceptionThrown:PlayStoreLoginWrapper.kt$PlayStoreLoginWrapper$throw Exception("Validation network code: ${response.code}")</ID>
    <ID>TooGenericExceptionThrown:PlayStoreLoginWrapper.kt$PlayStoreLoginWrapper$throw Exception(error)</ID>
    <ID>TooManyFunctions:AppLoungePackageManager.kt$AppLoungePackageManager</ID>
    <ID>TooManyFunctions:AppManager.kt$AppManager</ID>
    <ID>TooManyFunctions:AppManagerImpl.kt$AppManagerImpl : AppManager</ID>
    <ID>TooManyFunctions:AppManagerWrapper.kt$AppManagerWrapper</ID>
    <ID>TooManyFunctions:ApplicationListFragment.kt$ApplicationListFragment : TimeoutFragmentApplicationInstaller</ID>
    <ID>TooManyFunctions:ApplicationRepository.kt$ApplicationRepository</ID>
    <ID>TooManyFunctions:HomeFragment.kt$HomeFragment : TimeoutFragmentApplicationInstaller</ID>
    <ID>TooManyFunctions:MainActivityViewModel.kt$MainActivityViewModel : ViewModel</ID>
    <ID>TooManyFunctions:SearchFragment.kt$SearchFragment : TimeoutFragmentOnQueryTextListenerOnSuggestionListenerApplicationInstaller</ID>
    <ID>TooManyFunctions:TimeoutFragment.kt$TimeoutFragment : Fragment</ID>
    <ID>TooManyFunctions:UpdatesFragment.kt$UpdatesFragment : TimeoutFragmentApplicationInstaller</ID>
    <ID>UnusedParameter:SearchViewModel.kt$SearchViewModel$lifecycleOwner: LifecycleOwner</ID>
  </CurrentIssues>
</SmellBaseline>
